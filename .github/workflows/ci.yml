name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  contents: read

jobs:
  build-test:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Use Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Generate .env from secrets
        run: |
          echo "DATABASE_URL=${DATABASE_URL:-postgresql://postgres:postgres@localhost:5432/app}" >> .env
          echo "SALES_MS_URL=${SALES_MS_URL:-http://localhost:3001}" >> .env
          echo "JWT_SECRET=${JWT_SECRET:-dev_fallback_secret}" >> .env
          echo "CLOUDINARY_CLOUD_NAME=${CLOUDINARY_CLOUD_NAME}" >> .env
          echo "CLOUDINARY_API_KEY=${CLOUDINARY_API_KEY}" >> .env
          echo "CLOUDINARY_API_SECRET=${CLOUDINARY_API_SECRET}" >> .env
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          SALES_MS_URL: ${{ secrets.SALES_MS_URL }}
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          CLOUDINARY_CLOUD_NAME: ${{ secrets.CLOUDINARY_CLOUD_NAME }}
          CLOUDINARY_API_KEY: ${{ secrets.CLOUDINARY_API_KEY }}
          CLOUDINARY_API_SECRET: ${{ secrets.CLOUDINARY_API_SECRET }}
        shell: bash

      - name: Lint
        run: npm run lint

      - name: Build
        run: npm run build

      - name: Set up test database
        run: |
          docker run -d --name postgres -e POSTGRES_PASSWORD=postgres -e POSTGRES_USER=postgres -e POSTGRES_DB=app -p 5432:5432 postgres:15-alpine
          echo "DATABASE_URL=postgresql://postgres:postgres@localhost:5432/app" >> $GITHUB_ENV
        shell: bash

      - name: Wait for DB
        run: |
          for i in {1..20}; do
            pg_isready -h localhost -p 5432 -U postgres && break
            sleep 1
          done
        shell: bash

      - name: Run tests with coverage
        run: npm run test:cov

      - name: Upload coverage artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage
